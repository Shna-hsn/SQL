CREATE OR REPLACE PROCEDURE P_UPDATEOUTTARGET AS
  V_MFGTYPE   SFCLINE_MAP.MFGTYPE%TYPE;
  V_LINE      SFCLINE_MAP.LINE%TYPE;
  V_FLAG      NUMBER := 2;
  VAR_ERR_MSG VARCHAR(2000);
  CURSOR CUR_LINES IS
    SELECT MFGTYPE, LINE FROM SFCLINE_MAP WHERE MFGTYPE = 'FA';

BEGIN
  OPEN CUR_LINES;
  LOOP
    FETCH CUR_LINES
      INTO V_MFGTYPE, V_LINE;
    EXIT WHEN CUR_LINES%NOTFOUND;
  
    SELECT SHIFT
      INTO V_FLAG
      FROM V_PPFPRODPERIOD
     WHERE LINE = V_LINE
       AND STARTTIME <= SYSDATE
       AND ENDTIME > SYSDATE;
  
    IF V_LINE NOT LIKE '%TB3%' THEN
      IF V_FLAG = 0 THEN
        UPDATE PPFSTANDARDPROD
           SET OUTTARGET = ROUND(TARGET * 0.93, 0)
         WHERE LINE = V_LINE;
        COMMIT;
      ELSE
        UPDATE PPFSTANDARDPROD
           SET OUTTARGET = ROUND(NIGHTTARGET * 0.93, 0)
         WHERE LINE = V_LINE;
        COMMIT;
      END IF;
    END IF;
  
    IF V_LINE LIKE '%TB3%' THEN
      IF V_FLAG = 0 THEN
        UPDATE PPFSTANDARDPROD SET OUTTARGET = TARGET WHERE LINE = V_LINE;
        COMMIT;
      ELSE
        UPDATE PPFSTANDARDPROD
           SET OUTTARGET = NIGHTTARGET
         WHERE LINE = V_LINE;
        COMMIT;
      END IF;
    END IF;
  END LOOP;
  CLOSE CUR_LINES;

EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    VAR_ERR_MSG := '??行?:' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE() ||
                   '??代?:' || SQLCODE || '??提示:' || SQLERRM(SQLCODE);
    DBMS_OUTPUT.PUT_LINE(VAR_ERR_MSG);
    INSERT INTO KBNERRORLOG
    VALUES
      (SYSDATE, 'P_UPDATEOUTTARGET', VAR_ERR_MSG);
    COMMIT;
END P_UPDATEOUTTARGET;
S